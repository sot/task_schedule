# Configuration file to test mail sending functionality.  
#   This will generate three emails, the first indicating that the
#   task itself gave a non-zero return status, then a notification
#   that it ran, and finally

subject      	  Send mail test     # subject of email
timeout      	  1000               # Default tool timeout
heartbeat_timeout 120                # Maximum age of heartbeat file (seconds)
iterations        2

# Optional message to include in the notification email
notify_msg <<NOTIFY
 Please see the web page to check on the weather:
 http://weather.yahoo.com/forecast/USNH0169_f.html
NOTIFY

# Data files and directories.  The *_dir vars can have $ENV{} vars which
# get interpolated.  (Note lack of task name after TST_DATA because this is just for test).

data_dir     $ENV{SKA_DATA}/send_mail          # Data file directory
log_dir      $ENV{SKA_DATA}/send_mail/logs     # Log file directory
bin_dir      $ENV{SKA_BIN}                     # Bin dir ($ENV{SKA_BIN} is typical)

# Email addresses that receive notification that the task ran

notify	     aldcroft@head.cfa.harvard.edu
# notify     second_person@head.cfa.harvard.edu

# Email addresses that receive an alert if there was a severe error in
# running jobs (i.e. couldn't start jobs or couldn't open log file).
# Processing errors *within* the jobs are caught with watch_cron_logs

alert	     aldcroft@head.cfa.harvard.edu

# Define task parameters
#  cron: Job repetition specification ala crontab
#  exec: Name of executable.  Can have $ENV{} vars which get interpolated.  
#        If bin_dir is defined then bin_dir is prepended to non-absolute exec names.
#  log: Name of log.  Can have $ENV{} vars which get interpolated.
#        If log is set to '' then no log file will be created
#        If log is not defined it is set to <task_name>.log.
#        If log_dir is defined then log_dir is prepended to non-absolute log names.
#  timeout: Maximum time (seconds) for job before timing out
#  check: Specify reg-ex's to watch for in output from task1.  This is done
# 	   with a call to watch_cron_logs based on this definition.  Flagged
# 	   errors are sent to the alert list.  If no <check ..> 
# 	   parameter is given then no checking is done.  See
# 	   watch_cron_logs doc for more info.  If an alert is sent then further
#         alerts are disabled until the file specified by disable_alerts
#         in the data directory is removed.

 <task ls>
       cron * * * * *
       check_cron * * * * *
       exec /bin/ls -1 /cant/find/this
       timeout 15
       <check>
         <error>
           * warning
           * error
           * no such file
         </error>
       </check>
 </task>
